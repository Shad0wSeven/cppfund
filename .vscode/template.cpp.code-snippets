{
	// Place your cppfund workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
		"USACO Template": {
		"scope": "c++, cpp",
		"prefix": "temp",
		"body": [
		"#include <bits/stdc++.h>\n",

		"using namespace std;\n",

		"typedef long long ll;",
		"typedef vector<int> vi;",
		"typedef pair<int, int> pi;\n",

		"#define mp make_pair",
		"#define pb push_back\n",

		"#define FAR(i, a, b) for (int i=a; i<b; i++)",
		"#define FOR(i, a) for (int i=0; i<a; i++)\n",

		"#define fi first",
		"#define se second",
		"#define lb lower_bound",
		"#define ub upper_bound",
		"#define endl \"\\n\"\n",

		"int main () {\n\t$0",
			"\treturn 0;\n",
		"}"
		],

		"description": "C++ Template"
	},

	"Input In Template": {
		"scope": "c++, cpp",
		"prefix": "inpt",
		"body": [
		"#include <bits/stdc++.h>\n",

		"using namespace std;\n",

		"typedef long long ll;",
		"typedef vector<int> vi;",
		"typedef pair<int, int> pi;\n",

		"#define mp make_pair",
		"#define pb push_back\n",

		"#define FAR(i, a, b) for (int i=a; i<b; i++)",
		"#define FOR(i, a) for (int i=0; i<a; i++)\n",

		"#define fi first",
		"#define se second",
		"#define lb lower_bound",
		"#define ub upper_bound",
		"#define endl \"\\n\"\n",

		"int main () {",
			"\tifstream cin(\"input.in\");\n\t$0",
			"\treturn 0;\n",
		"}"
		],

		"description": "C++ Template"
	},

	"for auto": {
		"scope": "c++, cpp",
		"prefix": "autof",
		"body": [
			"for(auto u: $0) { cout << u << \" \"; } cout << endl;",
		],

		"description": "C++ Template"
	},

	"minimum binary search": {
		"scope": "c++, cpp",
		"prefix": "minsearch",
		"body": [
			"int minBsearch(int low, int high, function<bool(int)> f) {",
				"for (high ++; low < high; ) {",
					"int mid = low + (high - low)/2;",
					"if ( f(mid) ) high = mid;",
					"else low = mid + 1;",
				"}",
				"return low;",
			"}",
		]
	},

	"maximum binary search": {
		"scope": "c++, cpp",
		"prefix": "maxsearch",
		"body": [
			"int lastTrue(int lo, int hi, function<bool(int)> f) {",
				"--lo;",
				"for (int dif = hi-lo; dif; dif /= 2)",
					"while (lo+dif <= hi && f(lo+dif)) lo += dif;",
				"return lo;",
			"}",
		]
	}
}